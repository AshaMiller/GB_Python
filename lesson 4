-------------------------------------------------------------------------------------------------------------
+1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
-------------------------------------------------------------------------------------------------------------


from sys import argv
import argparse

parser = argparse.ArgumentParser(description='Calculate salary')
parser.add_argument('--Hours', type=float)
parser.add_argument('--Money', type=float)
parser.add_argument('--Bonus', default=None, type=float)

args = parser.parse_args(argv[1:])


def salary(money: float, hours: float, bonus: float):
    return money * hours + bonus


print(f'Заработная плата: {salary(money=args.money, hours=args.hours, bonus=args.bonus)} руб')

-------------------------------------------------------------------------------------------------------------
+2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
-------------------------------------------------------------------------------------------------------------
'''Вариант с генератором'''
list1 = [7, 15, 4, 1, 11, 23, 14, 61, 17]
list2 = [el for el in list1 if el > list1[list1.index(el)-1]]
print(f'Исходный список: {list1}')
print(f'Новый список: {list2}')

'''Вариант с циклом'''
list1 = [7, 15, 4, 1, 11, 23, 14, 61, 17]
i = 0
new= []
for el in list1:
    if el > list1[i-1]:
        new.append(el)
    i+=1
print(f'Исходный список: {list1}')
print(f'Новый список: {list2}')



-------------------------------------------------------------------------------------------------------------
+3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
-------------------------------------------------------------------------------------------------------------
print(f'Числа от 20 до 240 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')


numbers = range(20, 241)
new_list = [el for el in numbers if el%20==0 or el%21==0]
print(new_list) 

-------------------------------------------------------------------------------------------------------------
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
-------------------------------------------------------------------------------------------------------------
list = [5, 8, 11, 11, 4, 1, 18, 22, 22, 1]
new_list = [el for el in list if list.count(el) < 2]

print(new_list)

--
Результат [5, 8, 4, 18]
--

-------------------------------------------------------------------------------------------------------------
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
-------------------------------------------------------------------------------------------------------------
from functools import reduce


def func(el_p, el):
    return el_p * el

print(f'Список четных значений: {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Результат вычисления произведения всех элементов списка: {reduce(func, [el for el in range(99, 1001) if el % 2 == 0])}')



-------------------------------------------------------------------------------------------------------------
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 
завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение 
элементов списка будет прекращено.
-------------------------------------------------------------------------------------------------------------
from itertools import count, cycle

start = int(input("Введите стартовое число >>>  "))
end = int(input("Введите конечное число >>> "))

list1 = [x for x in range(start, end + 1)]

print(f"Первый список: {list1}")
print('# итератор А')
count_list = []
for i in count(start):
    if i > end:
        break
    else:
        count_list.append(i)
print(f"Список через count: {count_list}")
print('# итератор В')
for idx, el in enumerate(cycle(list1)):
    print(el, end=' ')
    if idx >= 500:
        print()
        break




-------------------------------------------------------------------------------------------------------------
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, 
начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
-------------------------------------------------------------------------------------------------------------

from itertools import count
from math import factorial


def fact(n):
    for el in count(n):
        yield factorial(el)


x = 0
for i in fact(x):
    if x < 5:
        print(f"{x}! = {i}")
        x += 1
    else:
        break
________________________________

0! = 1
1! = 1
2! = 2
3! = 6
4! = 24
